// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          String        @id
  username         String        @unique
  user_avatar_url  String
  first_name       String
  last_name        String
  user_email       String        @unique
  posts            Post[]
  sentRequests     Friendship[]  @relation(name: "UserSentRequests")
  receivedRequests Friendship[]  @relation(name: "UserReceivedRequests")
  Like             Like[]
  userSession      UserSession[]
  sentMessages     Messages[]    @relation(name: "SentMessages")
  receivedMessages Messages[]    @relation(name: "ReceivedMessages")

  @@index([username])
}

model UserSession {
  session_id  String   @id @default(uuid())
  user_id     String   @unique
  isOnline    Boolean  @default(false)
  lastSeen    DateTime @default(now())
  updatedDate DateTime @updatedAt
  User        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Friendship {
  friendship_id String          @id @default(uuid())
  requester_id  String
  receiver_id   String
  status        FriendshipStaus @default(PENDING)
  requester     User            @relation(name: "UserReceivedRequests", fields: [requester_id], references: [user_id])
  receiver      User            @relation(name: "UserSentRequests", fields: [receiver_id], references: [user_id])
  createdDate   DateTime        @default(now())

  @@unique([requester_id, receiver_id])
}

enum FriendshipStaus {
  PENDING
  ACCEPTED
  REJECTED
  UNFRIENDED
  BLOCKED
}

model Like {
  id        String   @id @default(cuid())
  post_id   String
  user_id   String
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [post_id], references: [post_id])
  user      User     @relation(fields: [user_id], references: [user_id])

  @@unique([post_id, user_id])
}

model Post {
  user_id                 String
  post_id                 String   @id @default(cuid())
  post_content            String?  @db.Text
  post_image_location     String?
  post_image_url          String?
  post_image_thumbnail    String?
  post_image_aspect_ratio String?
  createDate              DateTime @default(now())
  updateDate              DateTime @default(now())
  user                    User     @relation(fields: [user_id], references: [user_id])
  likes_count             Int      @default(0)
  likes                   Like[]

  @@index([post_id, user_id])
}

model Notifications {
  notification_id String             @id @default(cuid())
  user_id         String
  actor_id        String
  post_id         String?
  comment_id      String?
  friendshi_id    String?
  is_read         Boolean            @default(false)
  type            NotificationsTypes
  createdDate     DateTime           @default(now())

  @@index([user_id])
}

enum NotificationsTypes {
  LIKE
  COMMENT
  FRIENDREQUEST
}

model Comments {
  comment_id   String    @id @default(uuid())
  comment_text String    @db.Text
  post_id      String
  createdDate  DateTime  @default(now())
  actor_id     String
  replies      Replies[]

  @@index([post_id])
}

model Replies {
  reply_id    String   @id @default(uuid())
  reply_text  String   @db.Text
  comment_id  String
  actor_id    String
  createdDate DateTime @default(now())
  Comment     Comments @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade)
}

model Messages {
  message_id  String        @id @default(uuid())
  message     String
  sender_id   String
  receiver_id String
  createdDate DateTime      @default(now())
  sender      User          @relation(name: "SentMessages", fields: [sender_id], references: [user_id])
  receiver    User          @relation(name: "ReceivedMessages", fields: [receiver_id], references: [user_id])
  status      MessageStatus @default(SENT)
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}
